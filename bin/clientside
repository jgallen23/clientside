#!/usr/bin/env node

var program = require('commander');
var Library = require('../lib/library');
var packageReader = require('../lib/package-reader');
var fs = require('fs');
var path = require('path');

program
  .version('0.0.4')
  .option('-e, --export <name>', 'Module Name')
  .option('-v, --verify', 'Verifies your code in a sandbox')
  .option('-s, --stats', 'Displays file size stats of all files')
  .usage('-e <name> [file]');

program.on('--help', function() {
  console.log('  Examples:');  
  console.log('Pass in params');  
  console.log('    $ clientside --export module index.js > dist/module.js');
  console.log('Read from package.json');  
  console.log('    $ clientside > dist/module.js');
}); 

program.parse(process.argv);


var files = program.args;

var verify = function(lib) {
  var out = lib.build();
  var vm = require('vm');
  var sandbox = {
    window: {},
    console: {
      log: function() {} 
    }
  }
  try {
    vm.runInNewContext(out, sandbox);
    console.log("No Errors");
  } catch(e) {
    //TODO:stack trace
    console.error("Error: "+e.message);
    if (e.stack)
      console.log(e.stack);
  }
};

var stats = function(lib) {
  var list = lib.depTree.getList();
  var out = lib.build();
  var toKB = function(bytes) {
    return (bytes / 1024).toFixed(2);

  }
  for (var i = 0, c = list.length; i < c; i++) {
    var filepath = list[i];
    filepath = lib.shims[filepath] || filepath;
    var file = lib.meta.files[filepath];
    var bytes = Buffer.byteLength(file.source);
    var kb = toKB(bytes);
    var relPath = file.filename.replace(process.cwd(), '');
    console.log(relPath + ' ' + kb + 'kb');
  }
  console.log('------------------------');
  var kb = toKB(Buffer.byteLength(out));
  console.log('TOTAL: ' + kb + 'kb');
};

var output = function(lib) {
  if (program.verify) {
    verify(lib);
  } else if (program.stats) {
    stats(lib);
  } else {
    var out = lib.build();
    process.stdout.write(out);
  }
};

if (program.export && files.length == 1) {
  var file = files[0];
  file = path.join(process.cwd(), file);
  var opt = {
    main: file,
    name: program.export
  }
  var l = new Library(opt);
  output(l);
} else {
  //read from package.json
  if (path.existsSync('package.json')) {
    var json = JSON.parse(fs.readFileSync('package.json'));
    var l = packageReader(json);
    output(l);
  } else {
    process.stdout.write(program.helpInformation());
    program.emit('--help');
    process.exit(1);
  }
}

